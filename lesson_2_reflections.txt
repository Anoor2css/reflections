What happens when you initialize a repository? Why do you need to do it?

On branch master

Initial commit

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        lesson_1_reflections.txt

nothing added to commit but untracked files present (use "git add" to track)

that's the log of the git init and git status,initialize a repository to  start a new project with version-control

How is the staging area different from the working directory and the repository? What value do you think it offers?

A kind of intermediary, like the bridge link the working directory and the staging area, when you wanna add some files you should put it on the bridge ,while you change your mind you can reset that, a kind of buffer to provide the change to regret and also a great way to commit the files in one logic.


How can you use the staging area to make sure you have one commit per logical change?


git diff to compare working directory and staging area
git diff --staged to compare the staging area and the most recent commit in the repository, 
with these two commands , we can make sure compare and to add one commit per logical change, git add then git diff, git commit then git diff --staged

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

A new idea you wanna to try and you don't wanna make change anythind in yout main code, like you wanna to develop a new version which is not an update of the previous version while is a new kind of interesting or something you wanna try. And also maybe there are many branchs that may be different with the main branch.

How do the diagrams help you visualize the branch structure?

see the commits on the branchs as a trace the parents way. Help to see the whole structure of the branchs.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

two branches become one trace, from now on ,the new commit can trace back to the both branches. 
because the parents of the new commit has two (from the two branches)

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

pros : easy to merge and compare, save time 

cons: have to keep a great code habitat and the same work preferenes with your collabrators. 